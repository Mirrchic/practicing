// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package postgres

import (
	"context"
)

const addNews = `-- name: AddNews :many
INSERT INTO news (newstitle, newsstatus)
VALUES ($1, $2) RETURNING id, newstitle, newsstatus
`

type AddNewsParams struct {
	Newstitle  string
	Newsstatus string
}

func (q *Queries) AddNews(ctx context.Context, arg AddNewsParams) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, addNews, arg.Newstitle, arg.Newsstatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(&i.ID, &i.Newstitle, &i.Newsstatus); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allNews = `-- name: AllNews :many
SELECT id, newstitle, newsstatus FROM news
`

func (q *Queries) AllNews(ctx context.Context) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, allNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(&i.ID, &i.Newstitle, &i.Newsstatus); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteNews = `-- name: DeleteNews :exec
DELETE FROM news 
WHERE id = $1
`

func (q *Queries) DeleteNews(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNews, id)
	return err
}

const getNews = `-- name: GetNews :one
SELECT id, newstitle, newsstatus FROM news 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNews(ctx context.Context, id int32) (News, error) {
	row := q.db.QueryRowContext(ctx, getNews, id)
	var i News
	err := row.Scan(&i.ID, &i.Newstitle, &i.Newsstatus)
	return i, err
}
